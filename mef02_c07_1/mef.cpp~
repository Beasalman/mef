#include "mef.h"

/* -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*- */

int main () {

    // ---------------------------------------------------------------------------
    // Cálculo del CVA.
    // ---------------------------------------------------------------------------

    cnodo2d *nod;
    vector <cmalla2d01 *> malla;
    map <int, cnodo2d *> gnodos;
    map <int, celem2d *> geltos;
    map <int, carista *> garistas;
    
    vector <cmalla1d *> malla1d;
	map <int, cnodo1d *> gnodos1d;
	map <int, celem1d *> geltos1d;
    // ---------------------------------------------------------------------------

    system ("touch smalla00.dat");    system ("rm smalla*.dat");
    system ("touch snumap00.dat");    system ("rm snumap*.dat");
    system ("touch sanalit00.dat");   system ("rm sanalit*.dat");
    system ("touch sbs00.dat");       system ("rm sbs*.dat");

    // ---------------------------------------------------------------------------

    clock_t timestart = clock ();

    // ---------------------------------------------------------------------------
    // Instancias que contienen los datos y parámetros.

    cdataprob dprob = cdataprob ();
    cdatamesh dmesh = cdatamesh ();
    cdatanum dnum = cdatanum ();

    dataread (dprob, dmesh, dnum);
    dprob.print ();

    // Paso temporal.

    dnum.caracdeltat = (dprob.tfin - dprob.tini) / dnum.caracniter;

    // ----------------------------------------------------------------------------
    // Nodos y pesos de integración numérica en el intervalo de referencia (1D).

    cgauss1d *g1 = new cgauss1d (3);

    // Nodos y pesos de integración numérica en el triángulo unidad (2D).

    cgauss02 *g2 = new cgauss02 (2); // 3

    // ----------------------------------------------------------------------------
    // Coeficiente de difusión 2D.

    cdiffusion2d *diff = NULL;
    if (dprob.tipodiff == 0) {
        diff = new cdiffusion00 (dprob.sigma, dprob.rho, dprob.nuinf);
    } else if (dprob.tipodiff == 1) {
        diff = new cdiffusion01 ();
    } else if (dprob.tipodiff == 2) {
        diff = new cdiffusion02 ();
    }

    // Coeficiente de convección 2D (velocidad).

    cconvection2d *velocity01 = NULL;
    velocity01 = new cconv00 (dprob.sigma, dprob.rho, dprob.rr, dprob.theta0, dprob.kappa, dprob.nuinf);
    cconvection2d *velocity02 = NULL;
    velocity02 = new cconv01 (dprob.sigma, dprob.rho, dprob.rr, dprob.theta0, dprob.kappa, dprob.nuinf);
    
							
    // ----------------------------------------------------------------------------
    /*
    // Solución analítica.

    canalitica2d *analyt = NULL;
    if (dprob.analitica == 0) {
        analyt = new canalitica00 ();                 // u = x y (1-x) (1-y)
    } else if (dprob.analitica == 1) {
        analyt = new canalitica01 ();                 // u = x^2 y^2 (1-x) (1-y) (t+1)
    } else if (dprob.analitica == 2) {
        analyt = new canalitica02 ();                 // u = (x-1) (2-x) (y-1) (2-y)
    }

    // Segundo miembro.

    csecond *sec = NULL;
//    sec = new csecond00 ();
//    sec = new csecond01 (analyt, diff, velocity, dprob.f);       // Problema 2.
    sec = new csecond03 (analyt, diff, velocity, dprob.f);         // Problema 3.
    */

    // ----------------------------------------------------------------------------
    // Función que proporciona el valor de la opción (Black-Scholes).
    // Payoff.
    // Condiciones de contorno del problema 1D.

    double d0 = dprob.rr - dprob.r;
    cbs *option;
    cpayoff *payoff;
    cdir1d *dir1d;

	//Calculo del modelo de B-S para imponer las condiciones de contorno 
    if (dprob.option == 1) {
        option = new cbscall (&dprob.strike, &dprob.r, &d0, &dprob.sinf);
        payoff = new cpayoffcall (&dprob.strike, &dprob.sinf);
        dir1d = new cdir1dcall (&dprob.strike, &dprob.r, &dprob.sinf, &d0, payoff);
    } else if (dprob.option == 2) {
        option = new cbsput (&dprob.strike, &dprob.r, &d0, &dprob.sinf);
        payoff = new cpayoffput (&dprob.strike, &dprob.sinf);
        dir1d = new cdir1dput (&dprob.strike, &dprob.r, &dprob.sinf, &d0, payoff);
    }

    // ----------------------------------------------------------------------------
    // Funciones de marcado de elementos.

    cmark *fmark00 = NULL;
    if (dmesh.tref0 == 0) {
        fmark00 = new cmark00 ();
    } else if (dmesh.tref0 == 1) {
        fmark00 = new cmark01 ();
    } else if (dmesh.tref0 == 2) {
        fmark00 = new cmark02 (dmesh.sigma);
    } else if (dmesh.tref0 == 3) {
        fmark00 = new cmark03 ();
    } else if (dmesh.tref0 == 4) {
        fmark00 = new cmark04 ();
    }

    cmark *fmark01 = NULL;
    if (dmesh.tref1 == 0) {
        fmark01 = new cmark00 ();
    } else if (dmesh.tref1 == 1) {
        fmark01 = new cmark01 ();
    } else if (dmesh.tref1 == 2) {
        fmark01 = new cmark02 (dmesh.sigma);
    } else if (dmesh.tref1 == 3) {
        fmark01 = new cmark03 ();
    } else if (dmesh.tref1 == 4) {
        fmark01 = new cmark04 ();
    }

    // ----------------------------------------------------------------------------
    // Dominio y malla inicial.

    cmalla2d01 m ;
    cmalla2d01 *pm;
    cmalla2d01 *pz;
    m.domain = new cdomain2d (&dmesh.vii, &dmesh.vsd);

    pm = &m;
    pm->tipo = dmesh.tipomalla;

    if (dprob.dominio == 0) {
        meshgen00 (pm, dmesh.vii, dmesh.vsd, gnodos, geltos, garistas);          // (2 x 2).
    } else if (dprob.dominio == 1) {
        meshgen01 (pm, dmesh.vii, dmesh.vsd, gnodos, geltos, garistas);          // Rectángulo con una ranura.
    } else if (dprob.dominio == 2) {
        meshgen02 (pm, dmesh.vii, dmesh.vsd, gnodos, geltos, garistas);          // L-shaped domain.
    } else if (dprob.dominio == 3) {
        meshgen03 (pm, dmesh.vii, dmesh.vsd, gnodos, geltos, garistas);          // U-shaped domain.
    }

    pm->fprint01 (0);
    malla.push_back (pm);           // Almacenamiento en el vector de mallas.

    int k = 0;
    cout << "\n__________________________________________________________________________________\n" << endl;
    cout << "   Malla: " << k << "      Nodos: " << pm->nsom << endl;

    // Vector auxiliar para localización de puntos.

    util01 (pm);

    // ----------------------------------------------------------------------------
    // Refinamientos iniciales.

    for (k=0; k<dmesh.nref; k++) {
        cmalla2d01 *pz = new cmalla2d01 (*(malla.back()));         // Copia de la malla anterior en una nueva.
        meshref01 (pz, gnodos, geltos, garistas, dmesh.tref0, dmesh.sigma, fmark00);       // Refinamiento.
        pz->domain = new cdomain2d (&dmesh.vii, &dmesh.vsd);
        pz->id = k + 1;

        malla.push_back (pz);
        pz->fprint01 (k+1);

        cout << "   Malla: " << pz->id << "      Nodos: " << pz->nsom << endl;
    }

    // ----------------------------------------------------------------------------
    // Condición inicial y resolución del problema.

    VectorXd uold (malla.back()->nsom);
    VectorXd vold (malla.back()->nsom);
    VectorXd uold1d (malla.back()->fronteras [0]->nodos.size());
    if (dprob.product == 1) {
        uold = VectorXd::Zero (malla.back()->nsom);
        uold1d = VectorXd::Zero (malla.back()->fronteras [1]->nodos.size());
	int i;
	for(i=0; i<malla.back()->nsom; i++){
	  vold (i) = (*payoff) (malla.back()->nodos[i]->x);
	}
        fprint11 (k, 0, uold);

        if (dprob.mtmarket == 1) {
            optioneuro01 (malla, k, malla.back(), g2, g1, dprob, dmesh, dnum, geltos, gnodos, garistas, option, 
                          fmark01, vold, uold, uold1d, diff, velocity01, velocity02);
        } else {
            if (dnum.nitref <= 0 || dnum.nitref > dnum.caracniter) {
	      optioneuro01 (malla, k, malla.back(), g2, g1, dprob, dmesh, dnum, geltos, gnodos, garistas, option, 
                              fmark01, vold, uold, uold1d, diff, velocity01, velocity02);
            } else {
	      optioneuro02 (malla, k, malla.back(), g2, g1,  dprob, dmesh, dnum, geltos, gnodos, garistas, option, 
			    fmark01, vold, uold, uold1d, diff, velocity01, velocity02);
            }
        }

    } else if (dprob.product == 2) {
        for (int i=0; i<malla.back()->nsom; i++) {
            uold (i) = (*payoff) (malla.back()->nodos[i]->x);         // No es el CVA, sino el valor con riesgo!!
        }
        fprint11 (k, 0, uold);

        optionamer01 (malla, k, malla.back(), g1, g2, dprob, dmesh, dnum, geltos, gnodos, garistas, 
                      option, dir1d, payoff, fmark01, uold, diff, velocity01, velocity02);
    }


    // ----------------------------------------------------------------------------
    // Fin del programa.

    clock_t timeend = clock ();
    cout << "\n\n                 Elapsed CPU time:  " << (timeend - timestart) / (double) CLOCKS_PER_SEC << " s" << endl << endl;

    // ---------------------------------------------------------------------------
}

/* -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*- */

